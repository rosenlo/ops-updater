#!/bin/bash -x

WORKSPACE=$(cd $(dirname $0)/; pwd)
cd $WORKSPACE

mkdir -p var

app=ops-updater
conf=cfg.json
logfile=var/app.log

check_pid() {
    running=`pgrep -x $app |wc -l`
    return $running
}

start() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo -n "$app now is running already, pid=`pgrep -x $app`"
        return 1
    fi

    nohup `pwd`/$app -c `pwd`/$conf &> $logfile &
    echo "$app started..., pid=$!"
}

stop() {
    pkill -x $app
    echo "$app stoped..."
}

restart() {
    stop
    sleep 1
    start
}

status() {
    check_pid
    running=$?
    if [ $running -gt 0 ];then
        echo "started"
    else
        echo "stoped"
    fi
}

tailf() {
    tail -f $logfile
}

build() {
    GOOS=linux GOARCH=amd64 go build -a
    if [ $? -ne 0 ]; then
        exit $?
    fi
}

pack() {
    build
    tar zcvf $app.tar.gz control cfg.json $app
}

packbin() {
    build
    tar zcvf $app-bin.tar.gz $app
}

help() {
    echo "$0 pid|reload|build|pack|packbin|start|stop|restart|status|tail"
}

pid() {
    pgrep -x $app
}

reload() {
    curl --insecure -s https://127.0.0.1:2001/config/reload | python -m json.tool
}

if [ "$1" == "" ]; then
    help
elif [ "$1" == "stop" ];then
    stop
elif [ "$1" == "start" ];then
    start
elif [ "$1" == "restart" ];then
    restart
elif [ "$1" == "status" ];then
    status
elif [ "$1" == "tail" ];then
    tailf
elif [ "$1" == "build" ];then
    build
elif [ "$1" == "pack" ];then
    pack
elif [ "$1" == "packbin" ];then
    packbin
elif [ "$1" == "pid" ];then
    pid
elif [ "$1" == "reload" ];then
    reload
else
    help
fi
